스프링.txt


* 프레임워크(Framework): 어떤 대상을 구성하는 구조,틀,뼈대
  =>어떤 기능을 미리 클래스/인터페이스 형태로 생성한 객체 => 반제품
  
 * Spring Framework:(전자정부프레임워크)  자바 웹 애플리케이션을 개발하기위한 오픈소스 프레임워크
    => 경량프레임워크 (경량 컨테이너 ) 
    * 톰캣 (서블릿 컨테이너) : 서블릿의 생성, 초기화, 서비스 실행,소멸등의 모든 권한을 가지고있는 서블릿


  * Spring (Legacy) : 실제업무와 연관성이 높음, 많은 자료가 있음,기존의 프로젝트 이해 쉽게, 거의 모든버전의 spring사용가능
                     / 초반 설정이 어렵다. was(톰캣)을 사용하기 때문에 많은 리소스가 필요
  * Spring Boot : 별도의 설정이 없음, was없이 실행가능, 로딩시간이 짧아서 테스팅 하기 좋음
                  / 기존의 설정과 완전 다른 형태의 개발, jsp 페이지처리를 별도처리 
                  
  * Maven(메이븐) : 빌드도구 -> 필요한 라이브러리를 쉽게 사용하도록 도와주는 형태   

   https://mvnrepository.com/
   
   * 스프링 특징
    - EJB(Enterprise Java Beans) 가볍고, 쉬운 경량프레임워크
    - 제어의 역행(IoC, Inversion of Control)을 사용한 느슨한 결함을 제공
    - 의존성 주입(DI, Dependency Injection)
    - 관점지향 프로그래밍 (AOP, Aspect-Oriented Programming)
    - 영속성을 활용가능한 다양한 서비스 제공(DB)
    - 다양한 라이브러리와 연동 가능
    - POJO(Plain Old Java Object)방식의 프레임워크
    
    
    * 주요 기능
    
    Spring Core : 다른 기능과 설정을 분리하기위한 IoC 기능을 제공
      "	   Context : 스프링 기본 기능, Bean을 접근하는 기능제공
      "	   DAO : JDBC 기능을 편리하게 제공
      "    ORM : 하이버네이트/마이바티스(아이바티스)과 같은 영속성 프레임워크 연결을 제공
                  https://mybatis.org/mybatis-3/ko/index.html
      "    AOP : 관점지향 프로그래밍 제공
      "    Web : 웹 개발에 필요한 기능정보를 제공
      "	   WebMVC : 스프링에서 MVC 기능을 제공
   
   


   * 의존성 주입 (DI) : 어떤 연관 관계를 개발자가 직접 코딩을 통해서 클래스(컴포넌트)에 부여X
                    	컨테이너에서 연결을 통해서 사용
   * 의존성(Dependency) : 어떤 객체는 혼자서 동작을 처리할수 없음. 
   
                    => 의존적인 객체를 직접 생성X, 제어 X 하지 않고 제어의 역행으로 특정객체를 외부에서 연결
                    
    - 의존성 주입 1) 생성자, 2)set메서드 사용한 주입이 가능하다.
  
   
   * 강한결합 / 약한결합 : 객체들간의 관계가 구조에 따라서 다양한 결합상태를 보여줌.
      => 약한결합의 형태로 구성
      
   * 제어의 역행 (IoC) : 메서드/객체 호출시 동작을 개발자가 결정 X, 외부(Spring)에서 결정하는 것     	 



  * 관점지향 프로그래밍 (AOP, Aspect Oriented Programming)
    => 동작안에서 주기능과 보조기능으로 분리해서 선택적으로 적용해서 사용하는 프로그래밍

  * AOP 용어 개념
   - aspect : 구현하고자하는 보조기능(메서드)
   - advice : apect를 실제 구현하는 대상(클래스), 메서드가 호출되는 기준으로 여러곳에서 실행가능
   - joinpoint : advice를 적용하는 지점 (스프링 - 메서드 결합점만 사용)
   - pointcut : advice가 적용되는 대상을 지정, 패키지명/클래스명/메서드명을 정규식으로 처리
   - target : advice가 적용되는 클래스
   - weaving : advice를 주기능에 적용하는것 
   
   * AOP 기능을 구현방법
   
   1) target 클래스를 지정 (주기능 클래스 지정 - ex 회원가입)
   2) advice 클래스를 지정 (보조기능 클래스 지정 - ex 보안처리)
   3) 설정 파일(spring)에서 pointcut을 설정
   4) 설정파일에서 advice와 pointcut을 연결하는 advicer 설정
   5) 설정파일에서 spring-ProxyFactoryBean 클래스 사용해서 타겟에 어드바이스 설정
   6) getBean() 메서드로 객체 접근해서 사용
   
   
   
   
   
   
   
   
   
    
   
   






